<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Surveillance Panneau Solaire</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <header>
        <%- include('partials/header1') %>
        <%- include('partials/header2') %>
    </header>
    <main>
        <%- body %>
    </main>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script>
        async function redirectTo(url){
            /* const idToken = await getIdToken();
            fetch(url, {
                headers: {
                    'Authorization': 'Bearer ' + idToken
                }
            }).then(res => res.text())
            .then(data =>  document.body.innerHTML = data); */
            window.location.href = url
        }    

        const firebaseConfig = {
            apiKey: "AIzaSyA36nylSZt5jnO7qQLeoev9DqDRBTTdcVY",
            authDomain: "aer-monitoring-90aac.firebaseapp.com",
            projectId: "aer-monitoring-90aac",
            storageBucket: "aer-monitoring-90aac.firebasestorage.app",
            messagingSenderId: "635346538722",
            appId: "1:635346538722:web:d984aa2573f41e7ff2cebb",
            measurementId: "G-RLJM4TZ0NP"
        };
        firebase.initializeApp(firebaseConfig);

        function login(email, password) {
            firebase.auth().signInWithEmailAndPassword(email, password)
            .then((userCredential) => {
                return userCredential.user.getIdToken();
            })
            .then((idToken) => {
                // Send idToken to your Express backend in Authorization header
                //redirectTo('/');
                /* console.log(`user connected`)
                fetch('/', {
                headers: {
                    'Authorization': 'Bearer ' + idToken
                }
                }) */
                /*.then(res => res.text())
                .then(data => alert(data)); */
                return true;
            })
            .catch((error) => {
                //alert (`Identifiants de connexion incorrect`)
                alert(error.message);
                return false;
            });
        }
        
        function signup(email, password) {
            firebase.auth().createUserWithEmailAndPassword(email, password)
            .then((userCredential) => {
                return userCredential.user.getIdToken();
            })
            .then((idToken) => {
                // Send idToken to your Express backend in Authorization header
                // redirectTo('/');
                /* fetch('/', {
                headers: {
                    'Authorization': 'Bearer ' + idToken
                }
                })
                .then(res => res.text())
                .then(data => alert(data)); */
                return true;
            })
            .catch((error) => {
                alert (`Identifiants de connexion incorrect`)
                // alert(error.message);
                return false
            });
        }
        
        function checkUserConnected (){
            //return firebase.auth().onAuthStateChanged( (user) => { return user; });  
            return firebase.auth().currentUser;              
        }

        function getIdToken (){
            const user = checkUserConnected();
            return user ? user.getIdToken() : null;
        }

        const loginForm = document.getElementById("login-form");

        loginForm.addEventListener("submit", function(event) {
            event.preventDefault(); // empêche le rechargement
            const username = document.getElementById("input_username").value;
            const password = document.getElementById("input_password").value;

            console.log(`username : ${username}`)
            login(username, password)
            
            if ( checkUserConnected() ){
                // redirectTo("/")
                /* const idToken = await getIdToken();
                console.log(`idToken : ${idToken}`) */
                redirectTo ("/")            
            }
            //alert ("Information de connexion invalides")
        });

        const registerForm = document.getElementById("register-form");

        registerForm.addEventListener("submit", function(event) {
            event.preventDefault(); // empêche le rechargement
            const username = document.getElementById("input_username").value;
            const password = document.getElementById("input_password").value;

            console.log(`username : ${username}`)
            if ( signup(username, password) ){
                redirectTo("/")
            }
            alert ("Information de connexion invalides")
        });
    </script>

    <script>
        firebase.auth().onAuthStateChanged((user) => {
            const userInfoContainer = document.getElementById("user-info");
            const authLinksContainer = document.getElementById("auth-links");
            authLinksContainer.innerHTML = "";
        
            if (user) {
                // Exemple avec user.photoURL
                const userImage = document.createElement("img");
                userImage.src = user.photoURL 
                //|| 'default-avatar.png'; // Fallback si pas de photo
                userImage.alt = user.email[0];
                userImage.className = "user-img";
        
                userInfoContainer.appendChild(userImage);

                // Lien Déconnexion
                const logoutLink = document.createElement("a");
                logoutLink.className = "link link-green";
                logoutLink.href = "#";
                logoutLink.textContent = "Déconnexion";
                logoutLink.onclick = function (e) {
                    e.preventDefault();
                    firebase.auth().signOut().then(() => {
                        window.location.href = "/"; // ou '/', selon ton besoin
                    });
                };
                authLinksContainer.appendChild(logoutLink);

                
            } else {
                // Optionnel : ajouter autre chose si pas connecté (ex: bouton de login)
                userInfoContainer.innerHTML = ''; // Ou un lien de connexion

                // Lien Connexion
                const loginLink = document.createElement("a");
                loginLink.className = "link link-green";
                loginLink.href = "/login";
                loginLink.textContent = "Connexion";
                authLinksContainer.appendChild(loginLink);
                
                document.querySelectorAll(".isConnected").forEach(element => {
                    element.style.display = "none";
                });
            }
        });
    </script>

    <!-- Intégration PostHog via CDN -->
    <script>
        !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init be ws Ss me ys capture Ne calculateEventProperties xs register register_once register_for_session unregister unregister_for_session Rs getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSurveysLoaded onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey canRenderSurveyAsync identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty Is ks createPersonProfile Ps bs opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing $s debug Es getPageViewId captureTraceFeedback captureTraceMetric".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
        posthog.init('phc_CCvMfrTc6NPH4ojmJ62nCcYw5WyOShcrsTJzbSYHx4w', {
            api_host: 'https://us.i.posthog.com',
            defaults: '2025-05-24',
            person_profiles: 'always', // or 'always' to create profiles for anonymous users as well
        })
    </script>
</body>
</html>