<!-- <h2>Sites</h2> -->
<div class="sites-card-container">
    <div class="site-card add-site-button" onclick="openNewSitePopup()">
      <h1>+ </h1>      
    </div>  
  
    <!-- <div class="site-card" onclick="selectSite('posthog')">
        <h3>posthog</h3>
        <div class="site-actions">
            <button onclick="openConfigPopup('posthog')">Configurer</button>
            <button onclick="redirectToView('posthog')">Visualiser</button>
        </div>
    </div>
    
    <div class="site-card" onclick="selectSite('posthog')">
        <h3>posthog</h3>
        <div class="site-actions">
            <button onclick="openConfigPopup('posthog')">Configurer</button>
            <button onclick="redirectToView('posthog')">Visualiser</button>
        </div>
    </div> -->
</div>

<!-- Popup de configuration -->
<!-- <div id="configModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeConfigPopup()">&times;</span>
      <h3>Configuration du site</h3>
  
      <div id="configFields"> -->
        <!-- Champs dynamiques ajout√©s ici -->
      <!-- </div>
  
      <button onclick="addConfigField()">Ajouter une paire</button>
      <button onclick="submitConfig()">Enregistrer</button>
    </div>
</div> -->

<div id="configModal" class="modal">
  <div class="modal-content">
    <span class="close" onclick="closeConfigPopup()">&times;</span>
    <h3 id="modalTitle">Configuration du site</h3>

    <input type="text" class="site-name" id="siteNameInput" placeholder="Nom du site">

    <div id="configFields"></div>

    <button onclick="addConfigField()">Ajouter une paire</button>
    <button onclick="submitConfig()">Enregistrer</button>
  </div>
</div>

<div id="jsonTableContainer">
  <button onclick="toggleTable()">Afficher/Masquer l'aper√ßu de l'affichage des donn√©es</button>

  <div id="jsonTableWrapper" style="display: none; margin-top: 10px;">
    <table border="1" style="width: 100%; border-collapse: collapse;">
      <thead>
        <tr>
          <th>Param√®tre mesur√©</th>
          <th>Unit√©</th>
          <th>Type de mesure</th>
          <th>Fr√©quence d‚Äô√©chantillonnage</th>
          <th>Valeur</th>
        </tr>
      </thead>
      <tbody id="jsonTableBody">
        <!-- Les lignes seront ins√©r√©es ici dynamiquement -->
      </tbody>
    </table>
  </div>
</div>

<style>
    /* Fond semi-transparent */
    .modal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow-y: auto;
      background-color: rgba(0, 0, 0, 0.5);
    }
  
    /* Contenu de la modale */
    .modal-content {
      background-color: #f9f9f9;
      margin: 5% auto;
      padding: 30px 40px;
      border-radius: 12px;
      width: 90%;
      max-width: 600px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      animation: fadeIn 0.3s ease-in-out;
    }
  
    /* Animation douce d'apparition */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
  
    /* Bouton de fermeture */
    .close {
      float: right;
      font-size: 28px;
      font-weight: bold;
      color: #333;
      cursor: pointer;
    }
  
    .close:hover {
      color: #e74c3c;
    }
  
    /* Titre */
    .modal-content h3 {
      margin-top: 0;
      color: #2c3e50;
      font-size: 24px;
      margin-bottom: 20px;
      text-align: center;
    }
  
    /* Ligne de configuration */
    .config-row {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
      gap: 10px;
      flex-wrap: wrap;
    }
  
    .config-row input, .site-name {
      flex: 1;
      padding: 10px;
      font-size: 15px;
      border-radius: 6px;
      border: 1px solid #ccc;
      background-color: white;
    }

    .site-name{
      flex: 2;
      padding: 10px;
      font-size: 15px;
      border-radius: 6px;
      border: 1px solid #ccc;
      background-color: #cca;
      margin-bottom: 10px;
    }
  
    /* Bouton supprimer une ligne */
    .config-row button {
      padding: 8px 12px;
      background-color: #e74c3c;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
  
    .config-row button:hover {
      background-color: #c0392b;
    }
  
    /* Boutons action bas modale */
    .modal-content > button {
      margin-top: 15px;
      margin-right: 10px;
      padding: 10px 18px;
      font-size: 16px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
  
    .modal-content > button:hover {
      background-color: #2980b9;
    }
  
    @media screen and (max-width: 480px) {
      .modal-content {
        padding: 20px;
      }
  
      .config-row {
        flex-direction: column;
        gap: 5px;
      }
  
      .config-row input {
        width: 100%;
      }
    }
</style>
  
<style>
    .sites-card-container{
        display: flex; flex-direction: row; flex-wrap: wrap;
    }

    .site-card {
      background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
      border-radius: 12px;
      padding: 1.5em;
      margin: 1em;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      width: 250px;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      cursor: pointer;
      font-family: "Segoe UI", sans-serif;
    }
  
    .site-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
  
    .site-card h3 {
      margin-top: 0;
      font-size: 1.4em;
      color: #2c3e50;
    }
  
    .site-card p {
      margin: 0.5em 0 1em;
      font-size: 0.95em;
      color: #555;
    }
  
    .site-actions {
      display: flex;
      gap: 0.5em;
    }
  
    .site-actions button {
      flex: 1;
      padding: 0.5em 0.8em;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 0.9em;
      transition: background-color 0.2s ease;
    }
  
    .site-actions button:hover {
      background-color: #2980b9;
    }

    .add-site-button {
      font-weight: bold;
      color: #1a237e; 
      text-align: center;
    }

</style>

<style>
  #jsonTableContainer {
    margin: 2em;
    font-family: "Segoe UI", sans-serif;
  }

  #jsonTableContainer button {
    padding: 0.6em 1.2em;
    background-color: #1a237e;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  #jsonTableContainer button:hover {
    background-color: #3949ab;
  }

  #jsonTableWrapper {
    margin-top: 1em;
    border-radius: 8px;
    overflow-x: auto;
  }

  #jsonTableWrapper table {
    width: 100%;
    border-collapse: collapse;
    background: white;
    box-shadow: 0 3px 12px rgba(0, 0, 0, 0.05);
  }

  #jsonTableWrapper th, #jsonTableWrapper td {
    padding: 0.8em 1em;
    border: 1px solid #ddd;
    text-align: left;
    font-size: 0.95em;
  }

  #jsonTableWrapper th {
    background-color: #f0f4f8;
    color: #2c3e50;
    font-weight: 600;
  }

  #jsonTableWrapper tr:nth-child(even) {
    background-color: #f9f9f9;
  }

  #jsonTableWrapper tr:hover {
    background-color: #e3f2fd;
  }
</style>


<script>
    function selectSite(name) {
      console.log("Site s√©lectionn√© :", name);
    }
    function editConfig(event, name) {
      event.stopPropagation();
      alert("Configurer " + name);
    }
    function viewData(event, name) {
      event.stopPropagation();
      alert("Visualiser les donn√©es de " + name);
    }
</script>

<script>
  let currentSiteName = null;

  function openConfigPopup(siteName) {
    currentSiteName = siteName;
    document.getElementById('configModal').style.display = 'block';
    document.getElementById('configFields').innerHTML = '';
    document.getElementById('siteNameInput').value = siteName || '';
    document.getElementById('siteNameInput').disabled = !!siteName;

    if (!siteName) {
      addConfigField(); // nouveau site, vide
      return;
    }

    // Site existant : charger sa config
    fetch(`/sites/getAdd/${siteName}`)
      .then(res => res.json())
      .then(site => {
        (site.config || []).forEach(({ key, value }) => {
          const row = document.createElement('div');
          row.className = 'config-row';
          row.innerHTML = `
            <input type="text" placeholder="Identifiant" value="${key}">
            <input type="text" placeholder="Valeur" value="${value}">
            <button onclick="this.parentElement.remove()">‚úñ</button>
          `;
          document.getElementById('configFields').appendChild(row);
        });
      })
      .catch(() => addConfigField());
  }

  /* let currentSite = null;

  function openConfigPopup(siteName) {
    document.getElementById('configModal').style.display = 'block';
    document.getElementById('configFields').innerHTML = ''; // reset

    if (!siteName) {
      addConfigField(); // nouveau site, on part de z√©ro
      return;
    }

    // üîÑ Charger la config existante du site
    fetch(`/sites/getAdd/${siteName}`)
      .then(res => res.json())
      .then(site => {
        if (site.config && site.config.length > 0) {
          site.config.forEach(({ key, value }) => {
            const row = document.createElement('div');
            row.className = 'config-row';
            row.innerHTML = `
              <input type="text" placeholder="Identifiant" value="${key}">
              <input type="text" placeholder="Valeur" value="${value}">
              <button onclick="this.parentElement.remove()">‚úñ</button>
            `;
            document.getElementById('configFields').appendChild(row);
          });
        } else {
          addConfigField(); // aucune config => un champ vide
        }
      })
      .catch(err => {
        console.error("Erreur lors de la r√©cup√©ration de la configuration :", err);
        addConfigField(); // en cas d'erreur on propose un champ vide
      });
  }
 */
  function closeConfigPopup() {
    document.getElementById('configModal').style.display = 'none';
  }

  function addConfigField() {
    const container = document.getElementById('configFields');
    const row = document.createElement('div');
    row.className = 'config-row';

    row.innerHTML = `
      <input type="text" placeholder="Identifiant">
      <input type="text" placeholder="Valeur">
      <button onclick="this.parentElement.remove()">‚úñ</button>
    `;

    container.appendChild(row);
  }

  function submitConfig() {
    const siteName = document.getElementById('siteNameInput').value.trim();
    if (!siteName) return alert("Le nom du site est requis");

    const rows = document.querySelectorAll('#configFields .config-row');
    const config = [];

    rows.forEach(row => {
      const inputs = row.querySelectorAll('input');
      const key = inputs[0].value.trim();
      const value = inputs[1].value.trim();
      if (key && value) config.push({ key, value });
    });

    fetch('/sites/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ siteName, config })
    })
      .then(res => res.json())
      .then(data => {
        alert('Site enregistr√© !');
        closeConfigPopup();
        location.reload(); // Recharge pour voir le nouveau site
      })
      .catch(err => {
        console.error(err);
        alert('Erreur lors de l\'enregistrement');
      });
  }

  /* function submitConfig() {
    const rows = document.querySelectorAll('#configFields .config-row');
    const config = [];

    rows.forEach(row => {
      const inputs = row.querySelectorAll('input');
      const key = inputs[0].value.trim();
      const value = inputs[1].value.trim();
      if (key && value) config.push({ key, value });
    });

    console.log(`${currentSite} - ${config}`)

    if (!currentSite) {
      alert("Aucun site s√©lectionn√©.");
      return;
    }

    fetch('/sites/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        siteName: currentSite,
        config
      })
    })
      .then(res => res.json())
      .then(response => {
        console.log("R√©ponse serveur:", response);
        alert("Configuration enregistr√©e !");
        closeConfigPopup();
      })
      .catch(err => {
        console.error(err);
        alert("Erreur lors de l'enregistrement.");
      });
    closeConfigPopup();
    // TODO: envoyer au serveur via fetch/ajax
  }
 */
  
  function redirectToView(siteName) {
    window.location.href = `/site/${encodeURIComponent(siteName)}/data`;
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    fetch('/sites/getAdd')
      .then(response => response.json())
      .then(sites => {
        const container = document.querySelector('.sites-card-container');
        /* container.innerHTML = ''; // on vide d‚Äôabord

        container.innerHTML = `
          <div class="site-card" onclick="openNewSitePopup()">
            <h1>+ </h1> <h3> Ajouter un site</h3>      
          </div>  
        ` */
        
        sites.forEach(site => {
          const card = document.createElement('div');
          card.className = 'site-card';
          card.onclick = () => selectSite(site.siteName);

          card.innerHTML = `
            <h3>${site.siteName}</h3>
            <div class="site-actions">
              <button onclick="event.stopPropagation(); openConfigPopup('${site.siteName}')">Configurer</button>
              <button onclick="event.stopPropagation(); redirectToView('${site.siteName}')">Visualiser</button>
            </div>
          `;

          container.appendChild(card);
        });
      })
      .catch(err => console.error('Erreur lors du chargement des sites :', err));
  });

  function openNewSitePopup() {
    // Option 1 : ouvrir le m√™me popup de configuration mais en mode "nouveau"
    // Il faudra adapter `submitConfig()` pour indiquer qu'on ajoute un nouveau
    openConfigPopup('');
  }
</script>

<script>
  const jsonData = [
    {
      "Param√®tre mesur√©": "Tension DC",
      "Unit√©": "V",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "520 V"
    },
    {
      "Param√®tre mesur√©": "Courant DC",
      "Unit√©": "A",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "12.3 A"
    },
    {
      "Param√®tre mesur√©": "Puissance DC",
      "Unit√©": "W",
      "Type de mesure": "Calcul√©e",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "6396 W"
    },
    {
      "Param√®tre mesur√©": "Tension AC (phase-phase)",
      "Unit√©": "V",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "400 V"
    },
    {
      "Param√®tre mesur√©": "Courant AC",
      "Unit√©": "A",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "10.5 A"
    },
    {
      "Param√®tre mesur√©": "Puissance active AC",
      "Unit√©": "kW",
      "Type de mesure": "Calcul√©e",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "7.8 kW"
    },
    {
      "Param√®tre mesur√©": "Puissance r√©active",
      "Unit√©": "kVAR",
      "Type de mesure": "Calcul√©e",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "1.2 kVAR"
    },
    {
      "Param√®tre mesur√©": "Fr√©quence r√©seau",
      "Unit√©": "Hz",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "50 Hz"
    },
    {
      "Param√®tre mesur√©": "Temp√©rature module",
      "Unit√©": "¬∞C",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "5 min",
      "Valeur typique": "47 ¬∞C"
    },
    {
      "Param√®tre mesur√©": "Temp√©rature ambiante",
      "Unit√©": "¬∞C",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "5 min",
      "Valeur typique": "35 ¬∞C"
    },
    {
      "Param√®tre mesur√©": "Irradiance",
      "Unit√©": "W/m¬≤",
      "Type de mesure": "Analogique",
      "Fr√©quence d‚Äô√©chantillonnage": "1 min",
      "Valeur typique": "850 W/m¬≤"
    },
    {
      "Param√®tre mesur√©": "Etat de fonctionnement onduleur",
      "Unit√©": "-",
      "Type de mesure": "Num√©rique",
      "Fr√©quence d‚Äô√©chantillonnage": "√âv√©nementiel",
      "Valeur typique": "ON"
    },
    {
      "Param√®tre mesur√©": "Alarme syst√®me",
      "Unit√©": "-",
      "Type de mesure": "Num√©rique",
      "Fr√©quence d‚Äô√©chantillonnage": "√âv√©nementiel",
      "Valeur typique": "Aucune alarme"
    },
    {
      "Param√®tre mesur√©": "Energie produite journali√®re",
      "Unit√©": "kWh",
      "Type de mesure": "Calcul√©e",
      "Fr√©quence d‚Äô√©chantillonnage": "10 min",
      "Valeur typique": "48.5 kWh"
    },
    {
      "Param√®tre mesur√©": "Energie cumul√©e",
      "Unit√©": "MWh",
      "Type de mesure": "Calcul√©e",
      "Fr√©quence d‚Äô√©chantillonnage": "Horaire",
      "Valeur typique": "132.7 MWh"
    }
  ];

  function toggleTable() {
    const wrapper = document.getElementById("jsonTableWrapper");
    const tbody = document.getElementById("jsonTableBody");

    if (wrapper.style.display === "none") {
      // Affiche le tableau
      tbody.innerHTML = "";
      jsonData.forEach(item => {
        const row = document.createElement("tr");
        for (let key of ["Param√®tre mesur√©", "Unit√©", "Type de mesure", "Fr√©quence d‚Äô√©chantillonnage", "Valeur typique"]) {
          const cell = document.createElement("td");
          cell.textContent = item[key];
          row.appendChild(cell);
        }
        tbody.appendChild(row);
      });
      wrapper.style.display = "block";
    } else {
      // Masque le tableau
      wrapper.style.display = "none";
    }
  }
</script>