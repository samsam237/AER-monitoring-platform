<!-- <h2>Sites</h2> -->
<div class="sites-card-container">
    <div class="site-card" onclick="selectSite('posthog')">
        <h3>posthog</h3>
        <div class="site-actions">
            <button onclick="openConfigPopup('posthog')">Configurer</button>
            <button onclick="redirectToView('posthog')">Visualiser</button>
        </div>
    </div>
    
    <div class="site-card" onclick="selectSite('posthog')">
        <h3>posthog</h3>
        <div class="site-actions">
            <button onclick="openConfigPopup('posthog')">Configurer</button>
            <button onclick="redirectToView('posthog')">Visualiser</button>
        </div>
    </div>
</div>

<!-- Popup de configuration -->
<div id="configModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeConfigPopup()">&times;</span>
      <h3>Configuration du site</h3>
  
      <div id="configFields">
        <!-- Champs dynamiques ajoutés ici -->
      </div>
  
      <button onclick="addConfigField()">Ajouter une paire</button>
      <button onclick="submitConfig()">Enregistrer</button>
    </div>
</div>

<style>
    /* Fond semi-transparent */
    .modal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow-y: auto;
      background-color: rgba(0, 0, 0, 0.5);
    }
  
    /* Contenu de la modale */
    .modal-content {
      background-color: #f9f9f9;
      margin: 5% auto;
      padding: 30px 40px;
      border-radius: 12px;
      width: 90%;
      max-width: 600px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      animation: fadeIn 0.3s ease-in-out;
    }
  
    /* Animation douce d'apparition */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
  
    /* Bouton de fermeture */
    .close {
      float: right;
      font-size: 28px;
      font-weight: bold;
      color: #333;
      cursor: pointer;
    }
  
    .close:hover {
      color: #e74c3c;
    }
  
    /* Titre */
    .modal-content h3 {
      margin-top: 0;
      color: #2c3e50;
      font-size: 24px;
      margin-bottom: 20px;
      text-align: center;
    }
  
    /* Ligne de configuration */
    .config-row {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
      gap: 10px;
      flex-wrap: wrap;
    }
  
    .config-row input {
      flex: 1;
      padding: 10px;
      font-size: 15px;
      border-radius: 6px;
      border: 1px solid #ccc;
      background-color: white;
    }
  
    /* Bouton supprimer une ligne */
    .config-row button {
      padding: 8px 12px;
      background-color: #e74c3c;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
  
    .config-row button:hover {
      background-color: #c0392b;
    }
  
    /* Boutons action bas modale */
    .modal-content > button {
      margin-top: 15px;
      margin-right: 10px;
      padding: 10px 18px;
      font-size: 16px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
  
    .modal-content > button:hover {
      background-color: #2980b9;
    }
  
    @media screen and (max-width: 480px) {
      .modal-content {
        padding: 20px;
      }
  
      .config-row {
        flex-direction: column;
        gap: 5px;
      }
  
      .config-row input {
        width: 100%;
      }
    }
</style>
  

<style>
    .sites-card-container{
        display: flex; flex-direction: row; flex-wrap: wrap;
    }

    .site-card {
      background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
      border-radius: 12px;
      padding: 1.5em;
      margin: 1em;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      width: 250px;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      cursor: pointer;
      font-family: "Segoe UI", sans-serif;
    }
  
    .site-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
  
    .site-card h3 {
      margin-top: 0;
      font-size: 1.4em;
      color: #2c3e50;
    }
  
    .site-card p {
      margin: 0.5em 0 1em;
      font-size: 0.95em;
      color: #555;
    }
  
    .site-actions {
      display: flex;
      gap: 0.5em;
    }
  
    .site-actions button {
      flex: 1;
      padding: 0.5em 0.8em;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 0.9em;
      transition: background-color 0.2s ease;
    }
  
    .site-actions button:hover {
      background-color: #2980b9;
    }
</style>

<script>
    function selectSite(name) {
      console.log("Site sélectionné :", name);
    }
    function editConfig(event, name) {
      event.stopPropagation();
      alert("Configurer " + name);
    }
    function viewData(event, name) {
      event.stopPropagation();
      alert("Visualiser les données de " + name);
    }
</script>
<script>
    function openConfigPopup(siteName) {
      document.getElementById('configModal').style.display = 'block';
      document.getElementById('configFields').innerHTML = ''; // reset
      addConfigField(); // start with one field
    }
  
    function closeConfigPopup() {
      document.getElementById('configModal').style.display = 'none';
    }
  
    function addConfigField() {
      const container = document.getElementById('configFields');
      const row = document.createElement('div');
      row.className = 'config-row';
  
      row.innerHTML = `
        <input type="text" placeholder="Identifiant">
        <input type="text" placeholder="Valeur">
        <button onclick="this.parentElement.remove()">✖</button>
      `;
  
      container.appendChild(row);
    }
  
    function submitConfig() {
      const rows = document.querySelectorAll('#configFields .config-row');
      const data = [];
  
      rows.forEach(row => {
        const inputs = row.querySelectorAll('input');
        const key = inputs[0].value.trim();
        const value = inputs[1].value.trim();
        if (key && value) data.push({ key, value });
      });
  
      console.log("Configuration soumise :", data);
      closeConfigPopup();
      // TODO: envoyer au serveur via fetch/ajax
    }
  
    function redirectToView(siteName) {
      window.location.href = `/site/${encodeURIComponent(siteName)}/data`;
    }
</script>
  