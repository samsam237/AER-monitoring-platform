<div class="page-container">
  <a href="/sites" class="back-link">← Retour au site</a>

  <h2>Données du site : <%= siteName %></h2>

  <div id="data-table-container">
    <table id="data-table">
      <thead></thead>
      <tbody></tbody>
    </table>
    <div id="pagination-controls"></div>
  </div>
</div>

<style>
  .page-container {
    padding: 2em;
    font-family: sans-serif;
  }

  .back-link {
    text-decoration: none;
    color: #3498db;
    font-size: 1rem;
    margin-bottom: 1em;
    display: inline-block;
  }

  #data-table-container{
    width: 100%;          /* ou une largeur fixe, ex: 800px */
    overflow-x: auto;     /* active la barre de défilement horizontale si nécessaire */
    border: 3px solid #218838; border-radius: 5px;
    padding: 3px;
  }

  #data-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1em;
  }

  #data-table th,
  #data-table td {
    border: 1px solid #ccc;
    padding: 0.75em;
    text-align: left;
  }

  #data-table th {
    background-color: #f0f0f0;
  }

  #pagination-controls {
    margin-top: 1em;
    text-align: center;
  }

  .pagination-button {
    padding: 0.5em 1em;
    margin: 0 0.25em;
    cursor: pointer;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
  }

  .pagination-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
</style>

<script>
  const siteName = "<%= siteName %>";
  const pageSize = 10;
  let currentPage = 1;
  let allData = [];

  function timeAgo(timestamp) {
    const now = Date.now(); // temps actuel en ms
    const eventTime = new Date(timestamp).getTime(); // convertir timestamp en ms
    const diffInSeconds = Math.floor((now - eventTime) / 1000);

    if (diffInSeconds < 60) {
      return diffInSeconds + (diffInSeconds <= 1 ? " second ago" : " seconds ago");
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return minutes + (minutes === 1 ? " minute ago" : " minutes ago");
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return hours + (hours === 1 ? " hour ago" : " hours ago");
    } else {
      const days = Math.floor(diffInSeconds / 86400);
      return days + (days === 1 ? " day ago" : " days ago");
    }
  }

  async function fetchData() {
    try {
      const res = await fetch(`/api/site/${siteName}/data`);
      const json = await res.json();
      allData = json.data; // ⚠️ bien accéder à .data si ta réponse est { data: [...] }

      renderTable();
    } catch (err) {
      console.error(err);
      document.getElementById("data-table-container").innerHTML =
        "<p>Erreur de chargement des données.</p>";
    }
  }

  function renderTable() {
    console.log("allData : ");
    console.log(allData);

    if (allData.length === 0) {
      document.getElementById("data-table-container").innerHTML = "<p>Compte vide</p>";
      return;
    }

    // Colonnes que tu veux afficher, avec renommage
    const columnsMap = {
      event: "event",
      distinct_id: "person",
      $current_url: "url",
      $browser: "browser",
      timestamp: "time"
    };

    // Pagination
    const start = (currentPage - 1) * pageSize;
    const end = start + pageSize;
    const pageData = allData.slice(start, end);

    const table = document.getElementById("data-table");
    const thead = table.querySelector("thead");
    const tbody = table.querySelector("tbody");

    // Générer en-têtes avec remplacement de _ par espace + noms personnalisés
    thead.innerHTML = "";
    const headerRow = document.createElement("tr");
    Object.values(columnsMap).forEach(displayName => {
      const th = document.createElement("th");
      th.textContent = displayName.replace(/_/g, " ").replace(/^\$/, "").toUpperCase();
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);

    // Générer lignes
    tbody.innerHTML = "";
    pageData.forEach(row => {
      const tr = document.createElement("tr");
      Object.keys(columnsMap).forEach(key => {
        const td = document.createElement("td");
        let value = row[key] !== undefined ? row[key] : " ";
        // Retirer $ devant la valeur si présent (string)
        if (key === "timestamp" && value !== " ") {
          value = timeAgo(value);
        }
        if (typeof value === "string") {
          value = value.replace(/^\$/, "").replace(/_/g, " ");
        }
        td.textContent = value;
        tr.appendChild(td);
      });
      tbody.appendChild(tr);
    });

    renderPagination();
  }

  function renderPagination() {
    const totalPages = Math.ceil(allData.length / pageSize);
    const container = document.getElementById("pagination-controls");
    container.innerHTML = "";

    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.textContent = i;
      btn.className = "pagination-button";
      if (i === currentPage) btn.disabled = true;
      btn.onclick = () => {
        currentPage = i;
        renderTable();
      };
      container.appendChild(btn);
    }
  }

  window.addEventListener("DOMContentLoaded", fetchData);
</script>
